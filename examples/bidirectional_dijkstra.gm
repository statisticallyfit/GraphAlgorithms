/*
* Copyright (C) 2013 - 2017 Oracle and/or its affiliates. All rights reserved.
*/
/**
 * name: Bidirectional Dijkstra's Algorithm
 * category: path finding
 * complexity:
 *   time: O(N log N) with N = number of nodes
 *   space: O(10 * N) with N = number of nodes
 * signature:
 *   arguments:
 *     in:
 *       - name: G
 *         type: graph
 *         description: the graph.
 *       - name: weight
 *         type: edgeProp<double>
 *         description: >
 *           edge property holding the (positive) weight of each edge in the
 *           graph.
 *       - name: source_node
 *         type: node
 *         description: the source node from the graph for the path.
 *       - name: destination_node
 *         type: node
 *         description: the destination node from the graph for the path.
 *     out:
 *       - name: parent
 *         type: nodeProp<node>
 *         description: >
 *           node property holding the parent node of the each node in the shortest
 *           path.
 *       - name: parent_edge
 *         type: nodeProp<edge>
 *         description: >
 *           node property holding the edge ID linking the current node in the path
 *           with the previous node in the path.
 *   return:
 *     type: bool
 *     description: >
 *           true if there is a path connecting source and destination nodes, false
 *           otherwise
 * tweetable_description: >
 *   Bidirectional dijkstra is a fast algorithm for finding a shortest path in a graph
 * definition: >
 *   This variant of the Dijkstra's algorithm searches for shortest path in two ways, it
 *   does a forward search from the source node and a backwards one from the destination
 *   node. If the path between the nodes exists, both searches will meet each other at
 *   an intermediate point.
 * implementation_details: >
 *   This algorithm runs in a sequential way.
 * applications:
 *   - This algorithm can be implemented in optimization problems that can be represented
 *     with a graph structure.
 * compare_to:
 *   - id: pgx_builtin_p1a_single_source_single_destination_dijkstra
 *     difference: >
 *       The bidirectional approach can be faster than the classic Dijkstra implementation
 *       depending on the structure of the graph, since using two trees in the search (one
 *       from the source node and the other one from the destination node) will reduce the
 *       complexity of the search for the shortest path.
 *   - id: pgx_builtin_p2b_single_source_single_destination_filtered_bidirectional_dijkstra
 *     difference: >
 *       The difference between these biderectional implementations is the inclusion of the
 *       filter expression over the edges, since the shortest path found in both cases can
 *       be different with the same chosen source and destination nodes, because of the
 *       restrictions over the edges.
 * variants:
 *   - pgx_builtin_p2b_single_source_single_destination_filtered_bidirectional_dijkstra
 * see_also:
 *   - pgx_builtin_p1a_single_source_single_destination_dijkstra
 * links:
 *   - name: Dijkstra's algorithm
 *     url: https://en.wikipedia.org/wiki/Dijkstra's_algorithm
 *   - name: Bidirectional search
 *     url: https://en.wikipedia.org/wiki/Bidirectional_search
 */

procedure bidirectional_dijkstra(G: graph, Weight: E_P<double>, src, dst: node;
    Parent: N_P<node>, ParentEdge: N_P<edge>) : bool {
  
  if(G.numNodes() == 0) return false;
  if(src == dst) return true;

  // Temporary data structures
  N_P<node> RParent;
  N_P<edge> RParentEdge;
  N_P<bool> FFinalized;
  N_P<bool> RFinalized;
  map<node, double> FReachable;
  map<node, double> RReachable;
  N_P<double> FCost;
  N_P<double> RCost;

  // sequentially initialize, otherwise compiler flags this algorithm as
  //parallel in nature
  for (n: G.nodes) {
    n.Parent = NIL;
    n.ParentEdge = NIL;
    n.RParent = NIL;
    n.FFinalized = false;
    n.RFinalized = false;
    n.FCost = +INF;
    n.RCost = +INF;
  }
  FReachable[src] = 0.0;
  RReachable[dst] = 0.0;
  src.FCost = 0.0;
  dst.RCost = 0.0;

  /*
   *  Perform Dijkstra algorithm starting from src and dst
   *      one step at a time in one of the directions.
   *      Choose the direction with lesser frontier nodes for expansion.
   *  Store the shortest path found so far between src and dst in minCost.
   *  When minCost is < Lf + Lr, stop both the searches
   *      Lf is the min distance discovered in the latest forward search.
   *      Lr is the min distance discovered in the latest reverse search.
   *  After the first path between src and dst has been found, prune the
   *  search space as follows:
   *      Suppose you get node u from the Priority Queue in forward search
   *          and you are looking to expand u to a node v.
   *          if DistanceFromSrc(u) + weight(u,v) + Lr > minCost,
   *          do no expand to v.
   *      do the same in reverse search too.
   */
  double curMinFCost = 0.0;
  double curMinRCost = 0.0;
  double minCost = +INF;
  double minUnitCost = 0.0; // This value is 1 for int version
  node mid = NIL;
  bool terminate = false;
  while ( !terminate &&
       (FReachable.size() != 0) &&
       (RReachable.size() != 0) ) {

     if (FReachable.size() <= RReachable.size()) {
      node(G) fnext = FReachable.getMinKey();
      FReachable.remove(fnext);
      fnext.FFinalized = true;
      curMinFCost = fnext.FCost;
      if (curMinFCost + curMinRCost + minUnitCost >= minCost) {
        terminate = true;
      }

      double fdist = fnext.FCost;
      for(v: fnext.nbrs) (!v.FFinalized) {
        edge e = v.toEdge();
        if (fdist + e.Weight + curMinRCost <= minCost) {
          if (v.FCost > fdist + e.Weight) {
            v.FCost = fdist + e.Weight;
            FReachable[v] = v.FCost;
            v.Parent = fnext;
            v.ParentEdge = e;
            if (v.RCost != +INF) {
              double newCost = v.FCost + v.RCost;
              <minCost; mid> min= <newCost; v>;
            }
          }
        }
      }
      } else {
      node(G) rnext = RReachable.getMinKey();
      RReachable.remove(rnext);
      rnext.RFinalized = true;
      curMinRCost = rnext.RCost;
      if (curMinFCost + curMinRCost + minUnitCost >= minCost) {
        terminate = true;
      }
        
      double rdist = rnext.RCost;
      for(v: rnext.inNbrs) (!v.RFinalized) {
        edge e = v.toEdge();
        if (rdist + e.Weight + curMinFCost <= minCost) {
          if (v.RCost > rdist + e.Weight) {
            v.RCost = rdist + e.Weight;
            RReachable[v] = v.RCost;
            v.RParent = rnext;
            v.RParentEdge = e;
            if (v.FCost != +INF) {
              double newCost = v.FCost + v.RCost;
              <minCost; mid> min= <newCost; v>;
            }
          }
        }
      }
    }
  }

  // if a path was found
  if (mid != NIL) {
    // Update the 'Parent' and 'ParentEdge' property of all the nodes in the
    // path from mid to dst
    node cur = mid;
    while (cur != dst) {
      node prev = cur.RParent;
      prev.Parent = cur;
      prev.ParentEdge = cur.RParentEdge;
      cur = prev;
    }

    return true;
  }
  
  // No path was found
  return false;
}