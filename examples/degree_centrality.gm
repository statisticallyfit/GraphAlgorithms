/*
* Copyright (C) 2013 - 2017 Oracle and/or its affiliates. All rights reserved.
*/
/**
 * name: Degree Centrality
 * category: ranking and walking
 * complexity:
 *   time: O(N) with N = number of nodes
 *   space: O(N) with N = number of nodes
 * signature:
 *   arguments:
 *     in:
 *       - name: G
 *         type: graph
 *         description: the graph.
 *     out:
 *       - name: centrality
 *         type: nodeProp<int>
 *         description: >
 *           node property holding the degree centrality value for each node in
 *           the graph.
 *   return:
 *     type: void
 *     description:
 * tweetable_description: >
 *   Degree centrality measures the centrality of the nodes based on its degree,
 *   letting you see how a node influences its neighborhood
 * definition: >
 *   Degree centrality counts the number of outgoing and incoming edges for
 *   each node in the graph.
 * implementation_details: >
 *   This algorithm is designed to run in parallel given its high degree of parallelization.
 * applications:
 *   - Since degree centrality accounts for the connections of the nodes, it can be used to
 *     see the influence a node has over the nodes in its immediate neighborhood.
 * compare_to:
 *   - id: pgx_builtin_k7a_outdegree_centrality
 *     difference: >
 *       The difference between these two algorithms is the restrictions on the outgoing
 *       edges used to compute the centrality score.
 *   - id: pgx_builtin_k7b_indegree_centrality
 *     difference: >
 *       The difference between these two algorithms is the restrictions on the incoming
 *       edges used to compute the centrality score.
 * variants:
 *   - pgx_builtin_k7a_outdegree_centrality
 *   - pgx_builtin_k7b_indegree_centrality
 * see_also:
 *   - pgx_builtin_k1a_pagerank
 *   - pgx_builtin_k3a_node_betweenness_centrality
 *   - pgx_builtin_k4a_closeness_centrality_unit_length
 *   - pgx_builtin_k6_eigenvector_centrality
 * links:
 *   - name: Degree Centrality (Wikipedia)
 *     url: https://en.wikipedia.org/wiki/Centrality#Degree_centrality
 */

proc degree_centrality(G: graph; DC: N_P<int>)
{
  foreach(n: G.nodes) 
    n.DC = n.degree() + n.inDegree();
}