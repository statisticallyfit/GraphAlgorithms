/*
* Copyright (C) 2013 - 2017 Oracle and/or its affiliates. All rights reserved.
*/
/**
 * name: Dijkstra's Algorithm
 * category: path finding
 * complexity:
 *   time: O(N log N) with N = number of nodes
 *   space: O(4 * N) with N = number of nodes
 * signature:
 *   arguments:
 *     in:
 *       - name: G
 *         type: graph
 *         description: the graph.
 *       - name: weight
 *         type: edgeProp<double>
 *         description: >
 *           edge property holding the (positive) weight of each edge in the
 *           graph.
 *       - name: source_node
 *         type: node
 *         description: the source node from the graph for the path.
 *       - name: destination_node
 *         type: node
 *         description: the destination node from the graph for the path.
 *     out:
 *       - name: parent
 *         type: nodeProp<node>
 *         description: >
 *           node property holding the parent node of the each node in the shortest
 *           path.
 *       - name: parent_edge
 *         type: nodeProp<edge>
 *         description: >
 *           node property holding the edge ID linking the current node in the path
 *           with the previous node in the path.
 *   return:
 *     type: bool
 *     description: >
 *           true if there is a path connecting source and destination nodes, false
 *           otherwise
 * tweetable_description: >
 *   Dijkstra is a fast algorithm for finding a shortest path in a graph
 * definition: >
 *   Dijkstra's algorithm tries to find the shortest path (if there is one) between the
 *   given source and destination nodes, while minimizing the distance or cost associated
 *   to each edge in the graph.
 * implementation_details: >
 *   This algorithm runs in a sequential way.
 * applications:
 *   - This algorithm can be implemented in optimization problems that can be represented
 *     with a graph structure.
 * compare_to:
 *   - id: pgx_builtin_a1_prim
 *     difference: >
 *       Although Prim's algorithms looks for edges that minimize the cost when traversing
 *       the graph in a similar way to Dijkstra's shoretest path, Dijkstra will stop
 *       exploring the graph once it reaches the destination node, while Prim's will do so
 *       once it finishes to explore the whole graph.
 *   - id: pgx_builtin_p1b_single_source_single_destination_filtered_dijkstra
 *     difference: >
 *       The inclusion of the filter expression over the edges can make the shortest path
 *       found with this variant to be different from the one found with the classic
 *       implementation of the algorithm given the same chosen source and destination
 *       nodes.
 *   - id: pgx_builtin_p2_single_source_single_destination_bidirectional_dijkstra
 *     difference: >
 *       The bidirectional approach can be faster than the classic Dijkstra implementation
 *       depending on the structure of the graph, since using two trees in the search (one
 *       from the source node and the other one from the destination node) will reduce the
 *       complexity of the search for the shortest path.
 *   - id: pgx_builtin_p5_fattest_path
 *     difference: >
 *       Fattest path looks for maximal values of capacities, which are the equivalent to
 *       the weights (or distances) in Dijkstra and that are meant to be minimized. Another
 *       difference is that Fattest path will compute all the possible paths for the nodes
 *       in the graph.
 * variants:
 *   - pgx_builtin_p1b_single_source_single_destination_filtered_dijkstra
 *   - pgx_builtin_p2_single_source_single_destination_bidirectional_dijkstra
 *   - pgx_builtin_p2b_single_source_single_destination_filtered_bidirectional_dijkstra
 * see_also:
 *   - pgx_builtin_p3_single_source_all_destinations_bellman_ford
 *   - pgx_builtin_p5_fattest_path
 * links:
 *   - name: Dijkstra's algorithm
 *     url: https://en.wikipedia.org/wiki/Dijkstra's_algorithm
 *   - name: A Note on Two Problems in Connexion with Graphs
 *     url: http://math.mit.edu/~asuk/terence.pdf
 */

procedure dijkstra(G:graph, Len:E_P<double>, root, dest: node;
    Parent: N_P<node>, ParentEdge: N_P<edge>) : bool {

  if(G.numNodes() == 0) return false;

  N_P<bool> Reached;

  // sequentially initialize, otherwise compiler flags this algorithm as
  //parallel in nature
  for (n: G.nodes) {
    n.Parent = NIL;
    n.ParentEdge = NIL;
    n.Reached = false;
  }

  //-------------------------------
  // look up the node
  //-------------------------------
  map<node, double> Reachable;
  Reachable[root] = 0.0;            // Add root to reachable set

  //-------------------------------
  // look up the node
  //-------------------------------
  bool found = false;
  bool failed = false;
  while (!found && !failed)
  {
    if (Reachable.size() == 0) 
    {
      failed = true;
    }
    else {

      node(G) next = Reachable.getMinKey();
      if (next == dest)  {
        found = true;
      }
      else {
        next.Reached = true;
        double dist = Reachable[next];
        Reachable.remove(next);

	// for each neighbor of node next ...
        for(v: next.nbrs)(!v.Reached) { 
          edge e = v.toEdge();
          if (!Reachable.hasKey(v)) {
            Reachable[v] = dist + e.Len;
            v.Parent = next;
            v.ParentEdge = e;
          }
          else if (Reachable[v] > dist + e.Len) {
            Reachable[v] = dist + e.Len;
            v.Parent = next;
            v.ParentEdge = e;
          }
        }
      }
    }
  }

  // return false if not reachable
  return !failed;
}
