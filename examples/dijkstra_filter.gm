/*
* Copyright (C) 2013 - 2017 Oracle and/or its affiliates. All rights reserved.
*/
/**
 * name: Filtered Dijkstra's Algorithm
 * category: path finding
 * complexity:
 *   time: O(N log N) with N = number of nodes
 *   space: O(4 * N) with N = number of nodes
 * signature:
 *   arguments:
 *     in:
 *       - name: G
 *         type: graph
 *         description: the graph.
 *       - name: weight
 *         type: edgeProp<double>
 *         description: >
 *           edge property holding the (positive) weight of each edge in the
 *           graph.
 *       - name: source_node
 *         type: node
 *         description: the source node from the graph for the path.
 *       - name: destination_node
 *         type: node
 *         description: the destination node from the graph for the path.
 *       - name: filter_expression
 *         type: graphFilter
 *         description: >
 *           filter expression with conditions to be satisfied by the shortest path.
 *           If the expression is targeted to edges, it will be evaluated straight
 *           away. If the expression targets nodes, then it will be automatically
 *           translated into an equivalent edge expression by using the sources
 *           and/or the destinations of the edges from the current evaluated node,
 *           with exception of the source and destination nodes.
 *     out:
 *       - name: parent
 *         type: nodeProp<node>
 *         description: >
 *           node property holding the parent node of the each node in the shortest
 *           path.
 *       - name: parent_edge
 *         type: nodeProp<edge>
 *         description: >
 *           node property holding the edge ID linking the current node in the path
 *           with the previous node in the path.
 *   return:
 *     type: bool
 *     description: >
 *           true if there is a path connecting source and destination nodes, false
 *           otherwise
 * tweetable_description: >
 *   Filtered Dijkstra is a fast algorithm for finding a shortest path while also
 *   filtering edges
 * definition: >
 *   This variant of the Dijkstra's algorithm tries to find the shortest path while
 *   also taking into account a filter expression, which will add restrictions over
 *   the potential edges when looking for the shortest path between the source and
 *   destination nodes.
 * implementation_details: >
 *   This algorithm runs in a sequential way.
 * applications:
 *   - This algorithm can be implemented in optimization problems that can be represented
 *     with a graph structure.
 * compare_to:
 *   - id: pgx_builtin_p1a_single_source_single_destination_dijkstra
 *     difference: >
 *       The inclusion of the filter expression over the edges can make the shortest path
 *       found with this variant to be different from the one found with the classic
 *       implementation of the algorithm given the same chosen source and destination
 *       nodes.
 * variants:
 *   - pgx_builtin_p2b_single_source_single_destination_filtered_bidirectional_dijkstra
 * see_also:
 *   - pgx_builtin_p1a_single_source_single_destination_dijkstra
 * links:
 *   - name: Dijkstra's algorithm
 *     url: https://en.wikipedia.org/wiki/Dijkstra's_algorithm
 *   - name: A Note on Two Problems in Connexion with Graphs
 *     url: http://math.mit.edu/~asuk/terence.pdf
 */

require "oracle.pgx.filter.evaluation.pathfinding
     .SimplePathFindingEvaluationContext";
require "oracle.pgx.filter.evaluation.pathfinding.PathFindingFilter";

procedure dijkstra_filter(G:graph, Len:E_P<double>, root, dest: node,
    F: $PathFindingFilter; Parent: N_P<node>, ParentEdge: N_P<edge>) : bool {
  
  if(G.numNodes() == 0) return false;
  [F.prepare(root, dest)];

  N_P<bool> Reached;

  // sequentially initialize, otherwise compiler flags this algorithm as
  // parallel in nature
  for (n: G.nodes) {
    n.Parent = NIL;
    n.ParentEdge = NIL;
    n.Reached = false;
  }

  //-------------------------------
  // look up the node
  //-------------------------------
  map<node, double> Reachable;
  Reachable[root] = 0.0;            // Add root to reachable set

  //-------------------------------
  // look up the node
  //-------------------------------
  bool found = false;
  bool failed = false;
  
  [SimplePathFindingEvaluationContext context =
  new SimplePathFindingEvaluationContext($G)];
          
  while (!found && !failed) {
    if (Reachable.size() == 0) {
      failed = true;
    } else {
      node(G) next = Reachable.getMinKey();
      if (next == dest)  {
        found = true;
      } else {
        next.Reached = true;
        double dist = Reachable[next];
        Reachable.remove(next);

        for(v: next.nbrs)(!v.Reached) {
          edge e = v.toEdge();
          
          [context.setContext($next, $v, $e)];

          if ( [F.evaluate(context)] ) {
            if (!Reachable.hasKey(v)) {
              Reachable[v] = dist + e.Len;
              v.Parent = next;
              v.ParentEdge = e;
            } else if (Reachable[v] > dist + e.Len) {
              Reachable[v] = dist + e.Len;
              v.Parent = next;
              v.ParentEdge = e;
            }
          }
        }
      }
    }
  }

  // return false if not reachable
  return !failed;
}