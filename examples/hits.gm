/*
* Copyright (C) 2013 - 2017 Oracle and/or its affiliates. All rights reserved.
*/
/**
 * name: HITS (Hyperlink-Induced Topic Search)
 * category: ranking and walking
 * complexity:
 *   time: O(E * k) with E = number of edges, k <= maximum number of iterations
 *   space: O(2 * N) with N = number of nodes
 * signature:
 *   arguments:
 *     in:
 *       - name: G
 *         type: graph
 *         description: the graph.
 *       - name: iterations
 *         type: int
 *         description: number of iterations that will be performed.
 *     out:
 *       - name: authorities
 *         type: nodeProp<double>
 *         description: >
 *           node property holding the authority score for each node.
 *       - name: hubs
 *         type: nodeProp<double>
 *         description: >
 *           node property holding the hub score for each node.
 *   return:
 *     type: void
 *     description:
 * tweetable_description: >
 *   HITS assigns ranking scores to the nodes, aimed to assess the quality of information
 *   and references in linked structures
 * definition: >
 *   HITS is an algorithm that computes two ranking scores (authority and hub)for each 
 *   node in the graph. The idea of hubs and authorites comes from the web pages: a hub is
 *   regarded as a page that is not authoritative in a specific topic, but it has instead
 *   links to authority pages, which are regarded as meaningful sources for a particular
 *   topic by many hubs. Thus a good hub will point to many authorities, while a good
 *   authority will be pointed by many hubs. The authority score of a node V is computed by
 *   adding all the hub scores of its incomming neighbors (i.e. nodes with edges pointing
 *   to V). The hub score is computed in a similar way, using the authority scores instead.
 * implementation_details: >
 *   The implementation of this algorithm uses an iterative method.
 *   Both, authority and hub scores, of all the nodes in the graph are computed and updated
 *   at each iteration step.
 * applications:
 *   - HITS was designed to rate web pages given the links existing between them. It uses
 *     the authority of a page (node) to asses the quality of the information it has, while
 *     the hub score do so for the quality of the links to other pages (nodes).
 * compare_to:
 *   - id: pgx_builtin_r1b_salsa
 *     difference: >
 *       Both HITS and SALSA, compute scores for authorities and hubs. But while HITS scores
 *       must be computed in an ordered fashion (first authorities, then hubs), SALSA needs
 *       the graph to be a bipartite one, since this allows the authority and hub scores to
 *       be independent from each other. Another big difference between these algorithms, is
 *       that SALSA will just assign one score, either authority or hub, to each node
 *       depending on the side it is in the bipartite graph.
 * see_also:
 *   - pgx_builtin_k1a_pagerank
 *   - pgx_builtin_k6_eigenvector_centrality
 *   - pgx_builtin_r1b_salsa
 * links:
 *   - name: A survey of eigenvector methods of web information retrieval.
 *     url: http://epubs.siam.org/doi/pdf/10.1137/S0036144503424786
 *   - name: Authoritative Sources in a Hyperlinked Environment
 *     url: http://www.cs.cornell.edu/home/kleinber/auth.pdf
 */

procedure HITS(G: graph, K: int; Auth, Hub: N_P<double>) {

  G.Auth = 1.0;
  G.Hub = 1.0;

  int k = 0;
  while (k < K) {
    double norm;
    
    /*
     * phase 1. update auth from hub
     */
    norm = 0;
    foreach(p: G.nodes) {
      double v = sum(q: p.inNbrs){q.Hub};
      norm += v * v;
      p.Auth = v;
    }
    norm = sqrt(norm);
    // Normalize
    G.Auth = _.Auth / norm;

    /*
     * phase 3. hub from auth
     */
    norm = 0;
    foreach(p: G.nodes) {
      double v = sum(q: p.outNbrs){q.Auth};
      norm += v * v;
      p.Hub = v;
    }
    norm = sqrt(norm);
    // Normalize
    G.Hub = _.Hub / norm;
    k++;
  }

}
