/*
* Copyright (C) 2015 Oracle and/or its affiliates. All rights reserved.
*/
/**
 * name: Node Betweenness Centrality
 * category: ranking and walking
 * complexity:
 *   time: O(N * E) with N = number of nodes, E = number of edges
 *   space: O(3 * N) with N = number of nodes
 * signature:
 *   arguments:
 *     in:
 *       - name: G
 *         type: graph
 *         description: the graph.
 *     out:
 *       - name: centrality
 *         type: nodeProp<double>
 *         description: >
 *           node property holding the betweenness centrality value for each
 *           node.
 *   return:
 *     type: void
 *     description:
 * tweetable_description: >
 *   Betweenness centrality measures the centrality of the nodes to identify important
 *   nodes for the flow of information
 * definition: >
 *   The Betweenness Centrality of a node V in a graph is the sum of the fraction of
 *   shortests paths that pass through V from all the possible shortest paths connecting
 *   every possible pair of nodes S, T in the graph, such that V is different from S
 *   and T. Because of its definition, the algorithm is meant for connected graphs.
 * implementation_details: >
 *   The implementation of this algorithm uses a parallel BFS method called Multi-Source
 *   BFS (MS-BSF) for a faster and more efficient search of the shortests paths.
 * applications:
 *   - The coefficient from betweenness centrality can be used to identify nodes in a
 *     graph that are vital for the flow of information within it, making it a good option
 *     for applications in social networks and problems modelling flows of any kind.
 * compare_to:
 *   - id: pgx_builtin_k1a_pagerank
 *     difference: >
 *       PageRank was designed to find important documents in a linked set of documents,
 *       whereas betweenness centrality is designed to find important people in a social
 *       network.
 * variants:
 *   - pgx_builtin_k3b_approx_node_betweenness_centrality
 *   - pgx_builtin_k3c_approx_node_betweenness_centrality_from_seeds
 * see_also:
 *   - pgx_builtin_k1a_pagerank
 *   - pgx_builtin_k4a_closeness_centrality_unit_length
 *   - pgx_builtin_k4b_closeness_centrality_double_length
 *   - pgx_builtin_k6_eigenvector_centrality
 *   - pgx_builtin_k7a_outdegree_centrality
 *   - pgx_builtin_k7b_indegree_centrality
 *   - pgx_builtin_k7c_degree_centrality
 * links:
 *   - name: A Faster Algorithm for Betweenness Centrality.
 *     url: http://algo.uni-konstanz.de/publications/b-fabc-01.pdf
 *   - name: On Variants of Shortest-Path Betweenness Centrality and their Generic Computation
 *     url: http://algo.uni-konstanz.de/publications/b-vspbc-08.pdf
 */

procedure bc_full(G: graph; BC: N_P<double>) {
  G.BC = 0; // Initialize

  foreach (s:G.nodes) {
    // temporary values per node
    nodeProperty<double> sigma;
    nodeProperty<double> delta;
    G.sigma = 0;
    s.sigma = 1;

    // BFS order iteration from s
    inBFS(v: G.nodes from s) (v != s) {
      // Summing over BFS parents
      v.sigma = sum(w:v.upNbrs) { w.sigma };
    }
    inReverse(v!=s) { // Reverse-BFS order iteration to s
      v.delta =  // Summing over BFS children
        sum (w:v.downNbrs) { (1+ w.delta) / w.sigma } * v.sigma;

      v.BC += v.delta ; // accumulate BC
    }
  }
}
