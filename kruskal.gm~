
/**
 * Kruskal's algorithm to find a minimum spanning tree in graph G. 
 * 
 * 
 * input: graph, edge weights. 
 * output: minimum spanning tree graph. 
 * 
 * 
 */

procedure kruskal(G: graph, weights: nodeProperty<int>(G)): graph {

	graph MST;  // the resulting graph we need to get.
	
	// initialize MST to have all nodes of G and no edges, yet.
	nodeSet(MST) nodesMST;
	nodeSet(G) nodesG;
	nodesMST.addAll(nodesG);  

	// declare edges of MST and G. 
	edgeSet(MST) edgesMST;
	edgeOrder(G) edgesSortedG = min(e: G.edges) { e.weight }


	int numEdgesMST = 0;
	int numEdgesG = G.numEdges();

	while(numEdgesMST < numEdgesG - 1) {
		
		// find an edge e in edges of G of least weight.

		// delete e from the edgelist. 

		// if addition of e to MST does not make circuit,
		// then adde to edge set of MST and set numEdgesMST += 1
	}

}
